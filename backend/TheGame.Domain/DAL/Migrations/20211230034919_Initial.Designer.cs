// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TheGame.Domain.DAL;

#nullable disable

namespace TheGame.Domain.DAL.Migrations
{
    [DbContext(typeof(GameDbContext))]
    [Migration("20211230034919_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("GameLicensePlates", b =>
                {
                    b.Property<long>("GameId")
                        .HasColumnType("bigint");

                    b.Property<long>("LicensePlateId")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("datetimeoffset");

                    b.Property<long>("SpottedByUserId")
                        .HasColumnType("bigint");

                    b.HasKey("GameId", "LicensePlateId");

                    b.HasIndex("LicensePlateId");

                    b.HasIndex("SpottedByUserId");

                    b.ToTable("GameLicensePlates");
                });

            modelBuilder.Entity("PlayerTeam", b =>
                {
                    b.Property<long>("PlayersUserId")
                        .HasColumnType("bigint");

                    b.Property<long>("TeamsId")
                        .HasColumnType("bigint");

                    b.HasKey("PlayersUserId", "TeamsId");

                    b.HasIndex("TeamsId");

                    b.ToTable("TeamPlayers", (string)null);
                });

            modelBuilder.Entity("TheGame.Domain.DomainModels.Games.Game", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DateModified")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("EndedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("TeamId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("TeamId");

                    b.ToTable("Games", (string)null);
                });

            modelBuilder.Entity("TheGame.Domain.DomainModels.LicensePlates.LicensePlate", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("StateOrProvince")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Country", "StateOrProvince")
                        .IsUnique();

                    b.ToTable("LicensePlates");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Country = "CA",
                            StateOrProvince = "BC"
                        },
                        new
                        {
                            Id = 2L,
                            Country = "US",
                            StateOrProvince = "AK"
                        },
                        new
                        {
                            Id = 3L,
                            Country = "US",
                            StateOrProvince = "CA"
                        },
                        new
                        {
                            Id = 4L,
                            Country = "US",
                            StateOrProvince = "NV"
                        },
                        new
                        {
                            Id = 5L,
                            Country = "US",
                            StateOrProvince = "OR"
                        },
                        new
                        {
                            Id = 6L,
                            Country = "US",
                            StateOrProvince = "WA"
                        });
                });

            modelBuilder.Entity("TheGame.Domain.DomainModels.Players.Player", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("Players");
                });

            modelBuilder.Entity("TheGame.Domain.DomainModels.Teams.Team", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Teams");
                });

            modelBuilder.Entity("GameLicensePlates", b =>
                {
                    b.HasOne("TheGame.Domain.DomainModels.Games.Game", "Game")
                        .WithMany("GameLicensePlates")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TheGame.Domain.DomainModels.LicensePlates.LicensePlate", "LicensePlate")
                        .WithMany("GameLicensePlates")
                        .HasForeignKey("LicensePlateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TheGame.Domain.DomainModels.Players.Player", "SpottedBy")
                        .WithMany()
                        .HasForeignKey("SpottedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("LicensePlate");

                    b.Navigation("SpottedBy");
                });

            modelBuilder.Entity("PlayerTeam", b =>
                {
                    b.HasOne("TheGame.Domain.DomainModels.Players.Player", null)
                        .WithMany()
                        .HasForeignKey("PlayersUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TheGame.Domain.DomainModels.Teams.Team", null)
                        .WithMany()
                        .HasForeignKey("TeamsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TheGame.Domain.DomainModels.Games.Game", b =>
                {
                    b.HasOne("TheGame.Domain.DomainModels.Teams.Team", null)
                        .WithMany("Games")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TheGame.Domain.DomainModels.Games.Game", b =>
                {
                    b.Navigation("GameLicensePlates");
                });

            modelBuilder.Entity("TheGame.Domain.DomainModels.LicensePlates.LicensePlate", b =>
                {
                    b.Navigation("GameLicensePlates");
                });

            modelBuilder.Entity("TheGame.Domain.DomainModels.Teams.Team", b =>
                {
                    b.Navigation("Games");
                });
#pragma warning restore 612, 618
        }
    }
}
