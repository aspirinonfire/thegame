name: Azure Static Web Apps CI/CD
# https://learn.microsoft.com/en-us/azure/static-web-apps/build-configuration?tabs=github-actions#custom-build-commands

on:
  push:
    branches:
      - release/offline-only
  pull_request:
    types: [opened, synchronize, reopened, closed]
    branches:
      - release/offline-only

env:
  NODE_VERSION: 22
  UI_ROOT: ui
  AI_DIR: ai
  AI_PARAMS_PATH: training_params.json
  AI_TRAINING_DATA_PATH: training_data/plate_descriptions.json
  AI_ONNX_FILENAME: skl_plates_model.onnx
  AI_TESTS: tests
  AI_RELEASE_PREFIX: "offlineonly"
  AI_RELEASE_DESC: "AI Search model for 'release/offline-only'"
  PY_VERSION: 3.13
  PY_REQS: requirements.txt

jobs:
  build_and_deploy_job:
    if: github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.action != 'closed')
    runs-on: ubuntu-22.04
    name: Build and Deploy Job
    steps:
      - name: Setup node.js environment
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PY_VERSION }}
      
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: true

      # Ensure AI training code is not broken
      - name: Upgrade pip
        working-directory: ${{ env.AI_DIR }}
        run: python -m pip install --upgrade pip

      - name: Install PY deps
        working-directory: ${{ env.AI_DIR }}
        run: pip install -r ${{ env.PY_REQS }}

      - name: Run AI trainer unit tests
        working-directory: ${{ env.AI_DIR }}
        run: python -m unittest discover -v -s ${{ env.AI_TESTS }}

      # Check if AI model release with given version exists
      - name: Read Training Version
        id: training_params
        run: |
          echo "version=$(jq -r .version ai/training_params.json)" >> "$GITHUB_OUTPUT"
      
      - name: Check if model version has existing release
        id: model_version_release
        run: |
          if gh release view "${{ env.AI_RELEASE_PREFIX }}/v${{ steps.training_params.outputs.version }}" >/dev/null 2>&1; then
            echo "exists=true" >> "$GITHUB_OUTPUT"
          else
            echo "exists=false" >> "$GITHUB_OUTPUT"
          fi

      # If release exists, use it for deployment
      - name: Fetch existing model
        if: steps.model_version_release.outputs.exists == 'true'
        env:
          GH_TOKEN: ${{ github.token }}
        run: >
          gh release download "${{ env.AI_RELEASE_PREFIX }}/v${{ steps.training_params.outputs.version }}"
          --pattern ${{ env.AI_ONNX_FILENAME }}
          --dir ui/public
          --clobber

      # If release does not exist, train a new model and create new release
      - name: Train model
        working-directory: ${{ env.AI_DIR }}
        if: steps.model_version_release.outputs.exists == 'false'
        run: >
          python trainer.py
          --data-path ${{ env.AI_TRAINING_DATA_PATH }}
          --params-path ${{ env.AI_PARAMS_PATH }}
          --onnx-path ${{ github.workspace }}/${{ env.UI_ROOT }}/public/${{ env.AI_ONNX_FILENAME }}

      - name: Tag and Release new model
        if: steps.model_version_release.outputs.exists == 'false'
        env:
          GH_TOKEN: ${{ github.token }}
        run: >
          gh release create "${{ env.AI_RELEASE_PREFIX }}/v${{ steps.training_params.outputs.version }}"
          ${{ github.workspace }}/${{ env.UI_ROOT }}/public/${{ env.AI_ONNX_FILENAME }}
          ${{ github.workspace }}/${{ env.AI_DIR }}/${{ env.AI_PARAMS_PATH }}
          --title "AI Search Model ${{ env.AI_RELEASE_PREFIX }} v${{ steps.training_params.outputs.version }}"
          --notes "AI Search Model for release/offline-only branch"
      
      - name: Set version file
        id: vars
        run: |
          calculateSha=$(git rev-parse --short ${{ github.sha }})
          deployDate=$(date --iso-8601=seconds)
          echo "{\"deployDate\":\"$deployDate\",\"sha\":\"$calculateSha\"}" > ./${{ env.UI_ROOT }}/public/version.json

      # Build React App
      - name: NPM install
        working-directory: ${{ env.UI_ROOT }}
        run: npm install

      - name: Build and export React App
        working-directory: ${{ env.UI_ROOT }}
        run: npm run build
      
      - name: Install Playwright Browsers
        working-directory: ${{ env.UI_ROOT }}
        run: npx playwright install --with-deps chromium
      
      - name: Run Playwright tests
        working-directory: ${{ env.UI_ROOT }}
        run: npm run teste2eci
      
      - name: Build And Deploy UI
        id: swa
        uses: azure/static-web-apps-deploy@latest
        with:
          config_file_location: "/.github/workflows"
          azure_static_web_apps_api_token: ${{ secrets.AZURE_STATIC_WEB_APPS_API_TOKEN_ASHY_SMOKE_0BF195F1E }}
          repo_token: ${{ secrets.GITHUB_TOKEN }} # Used for GitHub integrations (i.e. PR comments)
          skip_app_build: true
          skip_api_build: true
          action: "upload"
          app_location: "/${{ env.UI_ROOT }}/build/client" # Pre-built app artifacts path
          api_location: "" # Api source code path - optional
        env: # Add environment variables here
          IS_STATIC_EXPORT: true

  close_pull_request_job:
    if: github.event_name == 'pull_request' && github.event.action == 'closed'
    runs-on: ubuntu-latest
    name: Close Pull Request Job
    steps:
      - name: Close Pull Request
        id: closepullrequest
        uses: azure/static-web-apps-deploy@latest
        with:
          azure_static_web_apps_api_token: ${{ secrets.AZURE_STATIC_WEB_APPS_API_TOKEN_ASHY_SMOKE_0BF195F1E }}
          action: "close"
