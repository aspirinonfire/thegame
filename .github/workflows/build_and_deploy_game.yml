# This action is responsible for building and deploying both backend and frontend code
# TODO separate into multiple stages/actions

name: Build and Deploy Game

on:
  push:
    branches:
      - release/backend_ui_integration
  # pull_request:
  #   types: [opened, synchronize, reopened, closed]
  #   branches:
  #     - master
  workflow_dispatch:

env:
  DOTNET_VERSION: '8.0.x'
  DOTNET_SLN_PATH: 'backend/backend.sln'
  DOTNET_BUILD_CONFIG: 'Release'
  TEST_SETTINGS_SAMPLE_PATH: 'backend/TheGame.Tests/testsettings.sample.json'
  TEST_SETTINGS_PLACEHOLDER_PATH: 'backend/TheGame.Tests/testsettings.json'

jobs:
  # https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-net
  build_test_and_publish_api_job:
    # TODO add PR update to 'if'
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-22.04
    name: Build, Test, and Publish APIs Job
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup dotnet ${{ env.DOTNET_VERSION }}
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}
      
      - name: Display dotnet version
        run: dotnet --version

      - name: Test Settings placeholder config
        run: cp ${{ env.TEST_SETTINGS_SAMPLE_PATH }} ${{ env.TEST_SETTINGS_PLACEHOLDER_PATH }}

      - name: Restore packages
        run: dotnet restore ${{ env.DOTNET_SLN_PATH }}

      - name: Build solution
        run: dotnet build ${{ env.DOTNET_SLN_PATH }} --configuration ${{ env.DOTNET_BUILD_CONFIG }} --no-restore --nologo

      - name: Run Tests
        run: dotnet test ${{ env.DOTNET_SLN_PATH }} --no-build --no-restore --verbosity normal

  build_and_deploy_swa_job:
    if: false
    # if: github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.action != 'closed') || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-22.04
    name: Build and Deploy Job
    steps:
      - name: Setup Node.js environment
        uses: actions/setup-node@v4
        with:
          node-version: 20
      
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: true

      - name: Set version file
        id: vars
        run: |
          calculateSha=$(git rev-parse --short ${{ github.sha }})
          deployDate=$(date --iso-8601=seconds)
          echo "{\"deployDate\":\"$deployDate\",\"sha\":\"$calculateSha\"}" > ./ui/public/version.json
      
      # TODO separate build and deploy steps. Use pulumi (or terraform) to configure and deploy to static web app
      - name: Build And Deploy UI
        id: swa
        uses: azure/static-web-apps-deploy@latest
        with:
          azure_static_web_apps_api_token: ${{ secrets.AZURE_STATIC_WEB_APPS_API_TOKEN_ASHY_SMOKE_0BF195F1E }}
          repo_token: ${{ secrets.GITHUB_TOKEN }} # Used for GitHub integrations (i.e. PR comments)
          action: "upload"
          app_location: "/ui" # App source code path
          is_static_export: true
          output_location: "/next_out" # Built app content directory - optional
          api_location: "" # Api source code path - optional
          skip_api_build: true

  # close_pull_request_job:
  #   if: github.event_name == 'pull_request' && github.event.action == 'closed'
  #   runs-on: ubuntu-latest
  #   name: Close Pull Request Job
  #   steps:
  #     - name: Close Pull Request
  #       id: closepullrequest
  #       uses: azure/static-web-apps-deploy@latest
  #       with:
  #         azure_static_web_apps_api_token: ${{ secrets.AZURE_STATIC_WEB_APPS_API_TOKEN_ASHY_SMOKE_0BF195F1E }}
  #         action: "close"
