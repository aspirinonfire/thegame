name: Deploy App

on:
  workflow_run:
    workflows: [Build Test and Publish]
    types: [completed]
    branches:
      - master
      - feature/pulumi

permissions:
  id-token: write # write is required for requesting the JWT
  contents: read 

env:
  artifacts: artifacts
  dockerfile: Dockerfile-pipelines
  NODE_VERSION: 20

jobs:
  deploy:
    runs-on: ubuntu-22.04
    if: ${{ github.event.workflow_run.conclusion == 'success' && (github.event.workflow_run.event == 'push' || github.event.workflow_run.event == 'workflow_dispatch') }}
    environment: dev
    steps:
    - name: Setup node.js environment
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: Download artifacts
      uses: actions/github-script@v6
      with:
        # TODO download and unzip ALL artifacts
        script: |
          let allArtifacts = await github.rest.actions.listWorkflowRunArtifacts({
            owner: context.repo.owner,
            repo: context.repo.repo,
            run_id: context.payload.workflow_run.id,
          });
          let matchArtifact = allArtifacts.data.artifacts.filter((artifact) => {
            return artifact.name == "${{ env.artifacts }}"
          })[0];
          let download = await github.rest.actions.downloadArtifact({
            owner: context.repo.owner,
            repo: context.repo.repo,
            artifact_id: matchArtifact.id,
            archive_format: 'zip',
          });
          let fs = require('fs');
          fs.writeFileSync(`${process.env.GITHUB_WORKSPACE}/${{ env.artifacts }}.zip`, Buffer.from(download.data));

    - name: Unzip build artifacts
      run: unzip -d ${{ env.artifacts }} ${{ env.artifacts }}.zip

    - name: List build artifacts
      run: ls -l ${{ env.artifacts }}

    - name: Prepare artifacts for deployment
      run: |
        mv ${{ env.artifacts }}/${{ env.dockerfile }} .
        mv ${{ env.artifacts}}/efbundle .
        chmod 744 efbundle

    # establish identity context for the deployment run (https://www.gatevnotes.com/passwordless-authentication-github-actions-to-microsoft-azure/)
    # this implementation uses github token exchange for service principal identity defined in entra
    - name: Az login
      uses: azure/login@v1
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

    # execute migrator
    # note: firewall rules are not required because target database allows azure service access
    - name: Run DB migrations
      run: efbundle --connection Server=tcp:${{ vars.DBSERVERNAME }}.database.windows.net,1433;Initial Catalog=${{ vars.DBNAME }};Encrypt=True;TrustServerCertificate=False;Connection Timeout=30;Authentication=\"Active Directory Managed Identity\";"
    
    # TODO: tag management
    - name: Build and Push docker image
      # temporary disable this step to speed up dev and testing
      if: false
      run: |
        docker login --username ${{ github.repository_owner }} --password ${{ secrets.GHCR_PAT }} ghcr.io
        docker build ${{ env.artifacts }} --file ${{ env.dockerfile }} --tag ghcr.io/${{ github.repository_owner }}/thegame-everything:latest
        docker push ghcr.io/${{ github.repository_owner }}/thegame-everything:latest

    # Deploy infra with Pulumi