name: Deploy App

on:
  workflow_run:
    workflows: [Build Test and Publish]
    types: [completed]
    branches:
      - master
  workflow_dispatch:
    inputs:
      build_run_id:
        type: string
        required: true
        description: build workflow run id (used to download build artifacts)

permissions:
  id-token: write # write is required for requesting the JWT
  contents: read 
  actions: read

env:
  ARTIFACTS: artifacts
  DOCKERFILE: Dockerfile-pipelines
  NODE_VERSION: 22
  PULUMI_PUBLISH_DIR: infra
  API_PUBLISH_DIR: api
  UI_PUBLISH_DIR: ui
  EFBUNDLE_BIN: efbundle
  INFRA_BINARY: TheGame.Infra
  CONTAINER_REPO: ghcr.io
  GAMEAPP_IMAGE_NAME: thegame-everything

jobs:
  deploy:
    runs-on: ubuntu-22.04
    if: ${{ (github.event.workflow_run.conclusion == 'success' && github.event.workflow_run.event == 'push') || github.event.workflow_run.event == 'workflow_dispatch' }}
    environment: dev
    steps:
    - name: Setup node.js environment
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: Install SWA CLI
      run: npm install -g @azure/static-web-apps-cli@latest

    - name: Download & extract artifact
      uses: actions/download-artifact@v4
      with:
        name: ${{ env.ARTIFACTS }}
        path: ${{ env.ARTIFACTS }}
        run-id: ${{ github.event.workflow_run.id || inputs.build_run_id }}
        repository: ${{ github.repository }}
        github-token: ${{ secrets.GITHUB_TOKEN }}

    - name: List build artifacts
      run: ls -lR ${{ env.ARTIFACTS }}

    - name: Prepare artifacts for deployment
      run: |
        chmod 744 ${{ env.ARTIFACTS }}/${{ env.EFBUNDLE_BIN }}
        chmod 744 ${{ env.ARTIFACTS }}/${{ env.PULUMI_PUBLISH_DIR }}/${{ env.INFRA_BINARY }}

    # establish identity context for the deployment run (https://www.gatevnotes.com/passwordless-authentication-github-actions-to-microsoft-azure/)
    # this implementation uses github token exchange for service principal identity defined in entra
    - name: Az login
      uses: azure/login@v1
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

    - name: Run test az command
      uses: 'azure/CLI@v1'
      with:
        inlineScript: |
          az account show
          az group list
 
    # TODO: tag management
    - name: Build and Push docker image
      run: |
        docker login --username ${{ github.repository_owner }} --password ${{ secrets.GHCR_PAT }} ${{ env.CONTAINER_REPO }}
        docker build ${{ env.ARTIFACTS }}/${{ env.API_PUBLISH_DIR }} --file ${{ env.ARTIFACTS }}/${{ env.API_PUBLISH_DIR }}/${{ env.DOCKERFILE }} --tag ${{ env.CONTAINER_REPO }}/${{ github.repository_owner }}/${{ env.GAMEAPP_IMAGE_NAME }}:latest
        docker push ${{ env.CONTAINER_REPO }}/${{ github.repository_owner }}/${{ env.GAMEAPP_IMAGE_NAME }}:latest

    # Deploy infra
    - name: Deploy Game Infra with Pulumi
      id: pulumi_deploy
      working-directory: ${{ env.ARTIFACTS }}/${{ env.PULUMI_PUBLISH_DIR }}
      run: ./${{ env.INFRA_BINARY }} deploy
      env:
        # We cannot use az login as service principal for pulumi azure native auth
        ARM_USE_OIDC: 'true'
        ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
        ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
        ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

        PulumiConfig__StackName: ${{ vars.STACKNAME }}
        PulumiConfig__BackendBlobStorageUrl: ${{ vars.BACKENDBLOBSTORAGEURL }}

        ExistingResources__SubscriptionId: ${{ vars.SUBSCRIPTIONID }}
        ExistingResources__ResourceGroupName: ${{ vars.RESOURCEGROUPNAME }}

        StaticWebApp__AppName: ${{ vars.SWAAPPNAME }}

        AzureSqlServer__DbServerName: ${{ vars.DBSERVERNAME }}
        AzureSqlServer__DbName: ${{ vars.DBNAME }}

        ContainerApp__AcaEnvName: ${{ vars.ACAENVNAME }}
        ContainerApp__AcaName: ${{ vars.ACANAME }}
        ContainerApp__GhcrUrl: ${{ env.CONTAINER_REPO }}
        ContainerApp__GhcrUsername: ${{ github.repository_owner }}
        ContainerApp__GhcrPat: ${{ secrets.GHCR_PAT }}
        ContainerApp__GameImage: ${{ env.GAMEAPP_IMAGE_NAME }}:latest

        GameApi__GoogleClientId: ${{ vars.GOOGLECLIENTID }}
        GameApi__GoogleClientSecret: ${{ secrets.GOOGLECLIENTSECRET }}
        GameApi__JwtSecret: ${{ secrets.JWTSECRET }}
        GameApi__JwtAudience: ${{ vars.JWTAUDIENCE }}
        GameApi__JwtTokenExpirationMin: ${{ vars.JWTTOKENEXPIRATIONMIN }}
   
    # execute migrator
    # note:
    # 1. Firewall rules are not required because target database allows azure service access.
    # 2. Authentication must be set to "Active Directory Default" in connection string to make it work with az login
    - name: Run DB migrations
      run: ${{ env.ARTIFACTS }}/${{ env.EFBUNDLE_BIN }} --verbose --connection "Server=tcp:${{ vars.DBSERVERNAME }}.database.windows.net,1433;Initial Catalog=${{ vars.DBNAME }};Encrypt=True;TrustServerCertificate=False;Connection Timeout=30;Authentication=Active Directory Default;"
   
    - name: Replace UI placeholders
      run: |
        echo "Starting token replacement in UI artifacts..."

        # Define a mapping of tokens to the desired environment variable values.
        declare -A tokenMap
        # Update the keys (tokens) and values (env var names) as needed.
        tokenMap["__VITE_GOOGLE_CLIENT_ID__"]="${{ vars.GOOGLECLIENTID }}"
        tokenMap["__VITE_API_URL__"]="${{ steps.pulumi_deploy.outputs.game_api_url }}"

        echo "Token Replacement Map:"
        for token in "${!tokenMap[@]}"; do
          echo "$token -> ${tokenMap[$token]}"
        done

        # Recursively process all files in the UI artifacts folder
        find "${{ env.ARTIFACTS }}/${{ env.UI_PUBLISH_DIR }}" -type f | while read -r file; do
          echo "Processing $file..."
          for token in "${!tokenMap[@]}"; do
            replacement="${tokenMap[$token]}"
            # Use sed in-place to replace token values in each file
            sed -i "s|$token|$replacement|g" "$file"
          done
        done

        echo "Token replacement completed."

    - name: 'Deploy UI to Azure Static Web App'
      run: |
        swa deploy "${{ env.ARTIFACTS }}/${{ env.UI_PUBLISH_DIR }}" \
        --tenant-id ${{ secrets.AZURE_TENANT_ID }} \
        --subscription-id ${{ secrets.AZURE_SUBSCRIPTION_ID }} \
        --resource-group ${{ vars.RESOURCEGROUPNAME }} \
        --app-name ${{ vars.SWAAPPNAME }} \
        --env Production \
        --verbose=silly