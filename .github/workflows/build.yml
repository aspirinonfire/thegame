# This action is responsible for building and deploying both backend and frontend code

name: Build Test and Publish

on:
  push:
    branches:
      - master
  pull_request:
    types: [opened, synchronize, reopened, closed]
    branches:
      - master
  workflow_dispatch:

env:
  DOTNET_BUILD_CONFIG: Release
  MIGRATOR_PROJECT: TheGame.DbMigrator
  DBCONTEXT_PROJECT: TheGame.Domain
  ARTIFACTS_DIR: to_deploy
  # API Settings
  BACKEND_ROOT: backend
  API_PROJECT_TO_PUBLISH: TheGame.Api/TheGame.Api.csproj
  API_PUBLISH_DIR: api
  GAMEAPP_IMAGE_NAME: thegame-api
  # Infra
  PULUMI_PROJECT_TO_PUBLISH: TheGame.Infra/TheGame.Infra.csproj
  API_TEST_SETTINGS_PLACEHOLDER_PATH: backend/TheGame.Tests/testsettings.json
  PULUMI_PUBLISH_DIR: infra
  # UI Settings
  NODE_VERSION: 22
  UI_ROOT: ui
  UI_PUBLISH_DIR: ui

jobs:
  # https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-net
  build_test_and_publish_artifacts_job:
    if: github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.action != 'closed') || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-22.04
    name: Build, Test and Publish API and UI artifacts
    steps:
      # Checkout and install necessary tools
      - name: Checkout source code
        uses: actions/checkout@v4

      - name: Setup node.js environment
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup dotnet versions
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: |
            9.0.x

      # Build and Test backend
      
      - name: Create Test Settings placeholder config
        run: touch ${{ env.API_TEST_SETTINGS_PLACEHOLDER_PATH }}

      - name: Restore dotnet packages
        working-directory: ${{ env.BACKEND_ROOT }}
        run: dotnet restore *.sln

      - name: Build dotnet solution
        working-directory: ${{ env.BACKEND_ROOT }}
        run: |
          dotnet build *.sln \
          --configuration ${{ env.DOTNET_BUILD_CONFIG }} \
          --no-restore \
          --nologo \
          /p:ContinuousIntegrationBuild=true \
          /p:Deterministic=true \
          /p:UseAppHost=false

      - name: Run dotnet tests
        working-directory: ${{ env.BACKEND_ROOT }}
        run: |
          dotnet test *.sln \
          --configuration ${{ env.DOTNET_BUILD_CONFIG }} \
          --no-build \
          --no-restore \
          --nologo \
          --verbosity normal \
          /p:CollectCoverage=true \
          /p:CoverletOutputFormat=opencover \
          --logger trx \
          --collect 'XPlat Code Coverage' \
          --settings './coverlet.runsettings'

      - name: Publish API
        working-directory: ${{ env.BACKEND_ROOT }}
        run: |
          dotnet publish ${{ env.API_PROJECT_TO_PUBLISH }} \
          --configuration ${{ env.DOTNET_BUILD_CONFIG }} \
          --no-build \
          --no-restore \
          --nologo \
          --verbosity normal \
          /p:UseAppHost=false \
          --output ${{ github.workspace }}/_temp/${{ env.API_PUBLISH_DIR }}

      - name: Builder Docker image
        run: |
          docker build \
          --file ${{ env.BACKEND_ROOT }}/Dockerfile-pipelines \
          --tag ${{ env.GAMEAPP_IMAGE_NAME }} \
          ${{ github.workspace }}/_temp/${{ env.API_PUBLISH_DIR }}

      - name: Save and compress Docker image
        run: |
          mkdir -p ${{ github.workspace }}/${{ env.ARTIFACTS_DIR }}/${{ env.API_PUBLISH_DIR }}
          docker save ${{ env.GAMEAPP_IMAGE_NAME }} | gzip > ${{ github.workspace }}/${{ env.ARTIFACTS_DIR }}/${{ env.API_PUBLISH_DIR }}/${{ env.GAMEAPP_IMAGE_NAME }}.tar.gz

      # Build UI APP
      - name: NPM install
        working-directory: ${{ env.UI_ROOT }}
        run: npm install

      - name: Set version file
        working-directory: ${{ env.UI_ROOT }}
        run: |
          calculateSha=$(git rev-parse --short ${{ github.sha }})
          deployDate=$(date --iso-8601=seconds)
          echo "{\"deployDate\":\"$deployDate\",\"sha\":\"$calculateSha\"}" > ./public/version.json

      - name: Build and export UI App
        working-directory: ${{ env.UI_ROOT }}
        run: npm run build
        # placeholder values to be replated during deploy workflow
        env:
          VITE_GOOGLE_CLIENT_ID: "__VITE_GOOGLE_CLIENT_ID__"
          VITE_API_URL: "__VITE_API_URL__"

      - name: Install Playwright Browsers
        working-directory: "ui"
        run: npx playwright install --with-deps chromium
      
      - name: Run Playwright tests
        working-directory: "ui"
        run: npm run teste2eci

      - name: Stage UI Artifacts
        working-directory: ${{ github.workspace }}/${{ env.ARTIFACTS_DIR }}
        run: |
          mv ${{ github.workspace }}/${{ env.UI_ROOT }}/build/client ${{env.UI_PUBLISH_DIR}}

      # build db migrator to be used in deploy workflow
      - name: Install EF Core CLI
        run: |
          dotnet tool install dotnet-ef --global
          dotnet tool restore
        shell: bash

      - name: Create EF Migration bundle
        working-directory: ${{ env.BACKEND_ROOT }}
        run: |
          dotnet ef migrations bundle \
          --project ${{ env.DBCONTEXT_PROJECT }} \
          --startup-project ${{ env.MIGRATOR_PROJECT }} \
          --configuration ${{ env.DOTNET_BUILD_CONFIG }} \
          --runtime linux-x64 \
          --self-contained \
          --force \
          --output ${{ github.workspace }}/${{ env.ARTIFACTS_DIR }}/efbundle

      # Publish IaC artifacts (Pulumi).
      - name: Publish Pulumi runner
        working-directory: ${{ env.BACKEND_ROOT }}
        run: |
          dotnet publish ${{ env.PULUMI_PROJECT_TO_PUBLISH }} \
          --configuration ${{ env.DOTNET_BUILD_CONFIG }} \
          --nologo \
          --runtime linux-x64 \
          --self-contained \
          /p:PublishSingleFile=true \
          --output ${{ github.workspace }}/${{ env.ARTIFACTS_DIR }}/${{ env.PULUMI_PUBLISH_DIR}}

      # Publish artifacts for deploy workflow
      - name: Upload combined artifacts for deployment
        uses: actions/upload-artifact@v4
        with:
          name: 'artifacts'
          path: ${{ github.workspace }}/${{ env.ARTIFACTS_DIR }}
          if-no-files-found: 'error'
          retention-days: 1
          overwrite: true
